import numpy as np
import scipy.io as sio
import os
import glob
import collections


cluster_filename = '/Users/elliotstaudt/Documents/MIRFLICKR-25000/Clusters/BOW_200_clusters.mat'

# Create the blank dictionary that will hold word associations for all object types


# Load assignments from clustering BoW descriptors for each object
f = sio.loadmat(cluster_filename)

assignments = np.array(f['assignments'])
centers = np.array(f['centers'])

print assignments.shape
print centers.shape[1]


master_dict = dict()
cluster_dicts = [dict() for x in range(centers.shape[1])]
print len(cluster_dicts)
big_iterator = 0;

tagsDir = '/Users/elliotstaudt/Documents/MIRFLICKR-25000/tags/'
objectsDir = '/Users/elliotstaudt/Documents/MIRFLICKR-25000/objects/'
# Get the names of each of the processed tag files in the tag directory.
# Read the tags and find the synonym for each one, if one exists.
for num in range(25000):
  # establish name of the synonym file
  fname = tagsDir + str(num) + '_synonyms.txt'
  # open the synonym file and read the contents into a list
  with open(fname) as f:
    content = [x.strip('\n') for x in f.readlines()]
    content = [x.strip('\r') for x in content]
  # get then names of the object files associated with the tag file
  local_object_files = glob.glob(objectsDir+str(num).zfill(5)+'/object_*.jpg')
  if len(local_object_files) > 0:
    for count in range(len(local_object_files)):
      for word in content:
        if word in cluster_dicts[assignments[0][big_iterator]-1]: #assignments from matlab, so indexing!
          cluster_dicts[assignments[0][big_iterator]-1][word] += 1
        else:
          cluster_dicts[assignments[0][big_iterator]-1][word] = 1
        # compile a separate dictionary of all words
        if word not in master_dict:
          master_dict[word] = 0
      big_iterator += 1

master_dict_ordered = collections.OrderedDict(sorted(master_dict.items(), key=lambda t: t[0]))

# Create a matrix that corresponds to cluster-word matches
word_matches = np.zeros((len(cluster_dicts),len(master_dict_ordered.keys())))
for num in range(len(cluster_dicts)):
  key_count = 0 #keep track of the keys
  for key in master_dict_ordered:
    if key in cluster_dicts[num]:
      word_matches[num,key_count] += 1
    key_count+=1


# Save the tags associated with objects to their own file
objects_Dir = '/Users/elliotstaudt/Documents/MIRFLICKR/objects/200_Clusters/'

num_words = 10;
keys = master_dict_ordered.keys()
object_words = []
for num in range(len(cluster_dicts)):
  a = word_matches[num,:]
  ind = np.argpartition(a, -10)[-10:]
  print num
  fsavename = objects_Dir + str(num) + '.txt'
  sf = open(fsavename,'w')
  local_count = 0
  for indnum in ind:
    if local_count != 0:
      sf.write('\n')
    local_count += 1
    sf.write(str(key[indnum]))
  sf.close()



