import numpy as np
import scipy.io as sio
import os
import glob


filename = '/Users/elliotstaudt/Documents/MIRFLICKR-25000/Clusters/BOW_200_clusters.mat'

# Create the blank dictionary that will hold word associations for all object types


# Load assignments from clustering BoW descriptors for each object
f = sio.loadmat(filename)

assignments = np.array(f['assignments'])
centers = np.array(f['centers'])

print assignments.shape
print centers.shape[1]


master_dict = dict()
cluster_dicts = [dict() for x in range(centers.shape[1])]
print cluster_dicts.shape
big_iterator = 0;

tagsDir = '/Users/elliotstaudt/Documents/MIRFLICKR-25000/tags/'
objectsDir = '/Users/elliotstaudt/Documents/MIRFLICKR-25000/objects/'
# Get the names of each of the processed tag files in the tag directory.
# Read the tags and find the synonym for each one, if one exists.
for num in range(10000):
  # establish name of the synonym file
  fname = tagsDir + str(num) + '_synonyms.txt'
  # open the synonym file and read the contents into a list
  with open(fname) as f:
    content = [x.strip('\n') for x in f.readlines()]
    content = [x.strip('\r') for x in content]
  # get then names of the object files associated with the tag file
  local_object_files = glob.glob(objectsDir+str(num).zfill(5)+'/object_*.jpg')
  if len(local_object_files) > 0:
    for count in range(len(local_object_files)):
      for word in content:
        if word in cluster_dicts[assignments[0][big_iterator]]:
          cluster_dicts[assignments[0][big_iterator]][word] += 1
        else:
          cluster_dicts[assignments[0][big_iterator]][word] = 1
        # compile a separate dictionary of all words
        if word not in master_dict:
          master_dict[word] = 0
      big_iterator += 1
    
#print tag_dict
print len(master_dict.keys())
print "big_iterator:", big_iterator
